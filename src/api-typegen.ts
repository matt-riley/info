/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as t from './schema/typeDefs';

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Music: {};
  Mutation: {};
  Query: {};
  Release: { // root type
    artists: Array<NexusGenRootTypes['ReleaseArtist']>; // [ReleaseArtist!]!
    id: string; // ID!
    title: string; // String!
  };
  ReleaseArtist: { // root type
    id: string; // ID!
    name: string; // String!
  };
  Track: { // root type
    name?: string | null; // String
    url?: string | null; // String
  };
  User: { // root type
    music?: NexusGenRootTypes['Music'] | null; // Music
  };
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  Music: { // field return type
    tracks: Array<NexusGenRootTypes['Track']> | null; // [Track!]
  };
  Mutation: { // field return type
    addRelease: NexusGenRootTypes['Release']; // Release!
  };
  Query: { // field return type
    user: NexusGenRootTypes['User'] | null; // User
  };
  Release: { // field return type
    artists: Array<NexusGenRootTypes['ReleaseArtist']>; // [ReleaseArtist!]!
    id: string; // ID!
    title: string; // String!
  };
  ReleaseArtist: { // field return type
    id: string; // ID!
    name: string; // String!
  };
  Track: { // field return type
    id: string | null; // ID
    name: string | null; // String
    url: string | null; // String
  };
  User: { // field return type
    music: NexusGenRootTypes['Music'] | null; // Music
  };
}

export interface NexusGenArgTypes {
  Music: {
    tracks: { // args
      limit?: number | null; // Int
      page?: number | null; // Int
    },
  };
  Mutation: {
    addRelease: { // args
      id?: string | null; // String
    },
  };
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = 'Music' | 'Mutation' | 'Query' | 'Release' | 'ReleaseArtist' | 'Track' | 'User';

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = 'Boolean' | 'Float' | 'ID' | 'Int' | 'String';

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: t.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}
