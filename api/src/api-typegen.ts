/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as t from "./schema/typeDefs"





declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Artist: { // root type
    description?: string | null; // String
    id: string; // ID!
    name: string; // String!
  }
  Label: { // root type
    description?: string | null; // String
    id: string; // ID!
    name: string; // String!
  }
  Music: {};
  MusicCollection: {};
  Mutation: {};
  Query: {};
  Release: { // root type
    country: string; // String!
    genres?: string[] | null; // [String!]
    id: string; // ID!
    title: string; // String!
  }
  Track: { // root type
    name?: string | null; // String
    url?: string | null; // String
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  Artist: { // field return type
    description: string | null; // String
    id: string; // ID!
    name: string; // String!
  }
  Label: { // field return type
    description: string | null; // String
    id: string; // ID!
    name: string; // String!
  }
  Music: { // field return type
    collection: NexusGenRootTypes['MusicCollection'] | null; // MusicCollection
    recentTracks: NexusGenRootTypes['Track'][] | null; // [Track!]
<<<<<<< HEAD
  };
=======
  }
>>>>>>> 1103785... [#70] Started the middleware
  MusicCollection: { // field return type
    artist: NexusGenRootTypes['Artist']; // Artist!
    artists: NexusGenRootTypes['Artist'][]; // [Artist!]!
    label: NexusGenRootTypes['Label']; // Label!
    labels: NexusGenRootTypes['Label'][]; // [Label!]!
    release: NexusGenRootTypes['Release']; // Release!
    releases: NexusGenRootTypes['Release'][]; // [Release!]!
<<<<<<< HEAD
  };
=======
  }
>>>>>>> 1103785... [#70] Started the middleware
  Mutation: { // field return type
    addRelease: NexusGenRootTypes['Release']; // Release!
  }
  Query: { // field return type
    music: NexusGenRootTypes['Music']; // Music!
  }
  Release: { // field return type
    artists: NexusGenRootTypes['Artist'][]; // [Artist!]!
    country: string; // String!
    genres: string[] | null; // [String!]
    id: string; // ID!
    title: string; // String!
  }
  Track: { // field return type
    id: string | null; // ID
    name: string | null; // String
    url: string | null; // String
  }
}

export interface NexusGenArgTypes {
  Music: {
    recentTracks: { // args
      limit?: number | null; // Int
      page?: number | null; // Int
    }
  }
  MusicCollection: {
    artist: { // args
      id: string; // ID!
    }
    label: { // args
      id: string; // ID!
    }
    release: { // args
      id: string; // ID!
    }
  }
  Mutation: {
    addRelease: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Artist" | "Label" | "Music" | "MusicCollection" | "Mutation" | "Query" | "Release" | "Track";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: t.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}